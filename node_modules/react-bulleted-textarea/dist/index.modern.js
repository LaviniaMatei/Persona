import React, { useState, useEffect, useCallback, useMemo } from 'react';
import styled from 'styled-components';
import TextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _templateObject4() {
  var data = _taggedTemplateLiteralLoose(["\n  margin: 0;\n  line-height: 1.1876em;\n  color: rgba(0, 0, 0, 0.5);\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  padding: 18.5px 14px;\n  background-color: white;\n  border-top: 1px solid rgba(0, 0, 0, 0.23);\n  border-left: 1px solid rgba(0, 0, 0, 0.23);\n  border-radius: 4px 0px 0px 4px;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n  line-height: 1.1876em;\n  height: 100%;\n  width: 100%;\n  resize: none;\n  padding: 18.5px;\n  padding-left: 35px;\n  padding-right: 14px;\n  align-items: 'center';\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  color: rgba(0, 0, 0, 0.87);\n  border-color: rgba(0, 0, 0, 0.23);\n  border-radius: 4px;\n  font-size: 1rem;\n  letter-spacing: 0.00938em;\n  white-space: nowrap;\n  outline: none;\n  overflow-y: hidden;\n\n  ::-webkit-scrollbar {\n    height: 5px;\n  }\n\n  ::-webkit-scrollbar-track {\n    width: 5px;\n    background: #f1f1f1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    width: 5px;\n    background: rgba(0, 0, 0, 0.23);\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: rgba(0, 0, 0, 0.5);\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  height: ", "px;\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 40px;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var BASE_HEIGHT = 19;
var Container = styled(function (_ref) {
  var rest = _objectWithoutPropertiesLoose(_ref, ["height"]);

  return React.createElement("div", Object.assign({}, rest));
})(_templateObject(), function (props) {
  return props.height;
});
var TextArea = styled.textarea(_templateObject2());
var BulletContainer = styled.div(_templateObject3());
var Bullet = styled.p(_templateObject4());

var BulletedTextArea = function BulletedTextArea(props) {
  var bulletChar = props.bulletChar,
      onChange = props.onChange,
      values = props.values,
      rest = _objectWithoutPropertiesLoose(props, ["bulletChar", "onChange", "values"]);

  var _useState = useState(values.length > 0 ? values.length : 1),
      lines = _useState[0],
      setLines = _useState[1];

  var _useState2 = useState(values.join('\n')),
      value = _useState2[0],
      setValue = _useState2[1];

  useEffect(function () {
    setValue(values.join('\n'));
  }, [values]);
  var handleChange = useCallback(function (e) {
    var newValue = e.target.value;
    var values = newValue.split('\n');
    var curLines = values.length;

    if (curLines !== lines) {
      setLines(curLines);
    }

    setValue(newValue);
    onChange(values);
  }, [setValue, setLines, lines, onChange]);
  var handleKeyPress = useCallback(function (e) {
    if (e.charCode === 13) {
      e.target.scrollLeft = 0;
    }
  }, []);
  return useMemo(function () {
    var height = BASE_HEIGHT * lines;
    var bullets = new Array(lines).fill(bulletChar);
    return React.createElement(Container, Object.assign({
      height: height
    }, rest), React.createElement(BulletContainer, null, bullets.map(function (bullet, i) {
      return React.createElement(Bullet, {
        key: "bullet-" + i
      }, bullet);
    })), React.createElement(TextArea, {
      value: value,
      onChange: handleChange,
      onKeyPress: handleKeyPress
    }));
  }, [value, lines, handleChange]);
};

BulletedTextArea.defaultProps = {
  bulletChar: '-',
  values: []
};

function _templateObject$1() {
  var data = _taggedTemplateLiteralLoose(["\n  flex-direction: column;\n  max-height: unset;\n  height: unset;\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledAdornment = styled(InputAdornment)(_templateObject$1());

var BulletAdornment = function BulletAdornment(props) {
  var bulletChar = props.bulletChar,
      lines = props.lines;
  var bullets = new Array(lines).fill(bulletChar);
  return React.createElement(StyledAdornment, {
    position: 'start'
  }, bullets.map(function (bullet, i) {
    return React.createElement(Bullet, {
      key: "bullet-" + i
    }, bullet);
  }));
};

BulletAdornment.defaultProps = {
  bulletChar: '-'
};

var MuiBulletedTextArea = function MuiBulletedTextArea(props) {
  var bulletChar = props.bulletChar,
      onChange = props.onChange,
      values = props.values,
      rest = _objectWithoutPropertiesLoose(props, ["bulletChar", "onChange", "values"]);

  var _useState = useState(values.length > 0 ? values.length : 1),
      lines = _useState[0],
      setLines = _useState[1];

  var _useState2 = useState(values.join('\n')),
      value = _useState2[0],
      setValue = _useState2[1];

  var handleChange = useCallback(function (e) {
    var newValue = e.target.value;
    var values = newValue.split('\n');
    var curLines = values.length;

    if (curLines !== lines) {
      setLines(curLines);
    }

    setValue(newValue);
    onChange(values);
  }, [setValue, setLines, lines, onChange]);
  useEffect(function () {
    setValue(values.join('\n'));
  }, [values, setValue]);
  return React.createElement(TextField, Object.assign({
    variant: 'outlined',
    multiline: true,
    InputProps: {
      startAdornment: React.createElement(BulletAdornment, {
        bulletChar: bulletChar,
        lines: lines
      })
    },
    onChange: handleChange,
    value: value
  }, rest));
};

MuiBulletedTextArea.defaultProps = {
  values: []
};

export { BulletedTextArea, MuiBulletedTextArea };
//# sourceMappingURL=index.modern.js.map
